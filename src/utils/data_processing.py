# tasksigma/src/utils/data_processing.py

import logging
import json

def preprocess_data(input_data):
    """
    Preprocesses input data before it is used by agents in the TaskSigma project.

    Args:
        input_data (dict or str): The raw input data to be processed. It can be a dictionary
                                  or a JSON string.

    Returns:
        dict: The preprocessed data in a structured format.
    """
    logging.info("Preprocessing data...")
    
    if isinstance(input_data, str):
        try:
            input_data = json.loads(input_data)
            logging.info("Input data parsed from JSON string.")
        except json.JSONDecodeError as e:
            logging.error(f"Failed to parse input data: {e}")
            raise ValueError("Invalid JSON input data.")

    # Example preprocessing steps:
    # - Normalize text
    # - Handle missing values
    # - Convert data types

    # For demonstration, let's assume we're normalizing the keys to lowercase
    preprocessed_data = {k.lower(): v for k, v in input_data.items()}
    
    logging.info("Data preprocessing completed.")
    return preprocessed_data


def postprocess_data(output_data):
    """
    Postprocesses the output data after it has been generated by the agents.

    Args:
        output_data (dict): The raw output data from the agents.

    Returns:
        dict: The postprocessed data, ready for presentation or storage.
    """
    logging.info("Postprocessing data...")
    
    # Example postprocessing steps:
    # - Format output for readability
    # - Aggregate or summarize results
    # - Convert data types for storage or presentation

    # For demonstration, let's assume we're formatting the output data with proper capitalization
    postprocessed_data = {k.capitalize(): v for k, v in output_data.items()}

    logging.info("Data postprocessing completed.")
    return postprocessed_data


def save_data_to_file(data, filename):
    """
    Saves the given data to a file in JSON format.

    Args:
        data (dict): The data to save.
        filename (str): The path to the file where the data will be saved.

    Returns:
        None
    """
    logging.info(f"Saving data to file: {filename}")
    
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=4)
        logging.info("Data successfully saved.")
    except IOError as e:
        logging.error(f"Failed to save data to file: {e}")
        raise

def load_data_from_file(filename):
    """
    Loads data from a JSON file.

    Args:
        filename (str): The path to the file to load data from.

    Returns:
        dict: The loaded data.
    """
    logging.info(f"Loading data from file: {filename}")
    
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        logging.info("Data successfully loaded.")
        return data
    except IOError as e:
        logging.error(f"Failed to load data from file: {e}")
        raise
    except json.JSONDecodeError as e:
        logging.error(f"Failed to parse JSON data from file: {e}")
        raise ValueError("Invalid JSON data in file.")
